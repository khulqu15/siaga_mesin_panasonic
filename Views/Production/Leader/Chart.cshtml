@model panasonic_machine_checker.Models.CasesModel
@{
    Layout = "~/Views/Shared/_App_Layout.cshtml";
}

<div class="space-y-4 mt-5">
    <div class="hidden">
        @if (Model.CasesList.Count > 0)
        {
            int counter = 1;
            foreach (var item in Model.CasesList)
            {
                <div class="case_data" id="case-@item.Id">
                    <span class="case_id">@counter</span>
                    <span class="case_name">@item.Machine.Name</span>
                    <span class="case_date_reported">@item.DateReported</span>
                    <span class="case_date_completed">@item.DateCompleted</span>
                    <span class="case_lini">@item.Lini.Name</span>
                    <span class="case_date_approved">
                        @if (@item.ApprovedAt == null)
                        {
                            <span>Null</span>
                        }
                        else
                        {
                            <span>@item.ApprovedAt</span>
                        }
                    </span>
                </div>
            }
        }
        else
        {
            <div class="w-full bg-error text-white p-3 rounded-xl text-center">
                Cases Not Found
            </div>
        }
    </div>
    <div class="w-full grid grid-cols-1 gap-4">
        <div>
            <div class="p-8 bg-base-100 rounded-xl">
                <canvas id="chart1"></canvas>
            </div>
        </div>
    </div>
    <div class="w-full grid lg:grid-cols-2 grid-cols-1 gap-4">
        <div>
            <div class="p-8 bg-base-100 rounded-xl">
                <canvas id="chart2"></canvas>
            </div>
        </div>
        <div>
            <div class="p-8 bg-base-100 rounded-xl">
                <canvas id="chart3"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let cases_labels = []
        let cases_minutes = []
        let cases_hours = []
        let cases_background_colors = []
        let cases_border_colors = []
        function initData() {
            let linis = []
            Array.from(document.getElementsByClassName('case_data')).map((element, index) => {
                let lini = Array.from(element.getElementsByClassName('case_lini'))[0].innerHTML
                if (linis.find(item => item.hasOwnProperty(lini))) {
                    let name = Array.from(element.getElementsByClassName('case_name'))[0].innerHTML
                    let date_reported = Array.from(element.getElementsByClassName('case_date_reported'))[0].innerHTML
                    let date_completed = Array.from(element.getElementsByClassName('case_date_completed'))[0].innerHTML
                    let date_approved = Array.from(element.getElementsByClassName('case_date_approved'))[0].innerHTML

                    if (date_reported != null) {
                        let end_date = new Date(date_approved)
                        if (date_approved != null) end_date = new Date()

                        let num = Math.round(0xffffff * Math.random())
                        var r = num >> 16;
                        var g = num >> 8 & 255;
                        var b = num & 255;
                        let rgb = 'rgb(' + r + ', ' + g + ', ' + b + ')';
                        let rgba = 'rgb(' + r + ', ' + g + ', ' + b + ', 0.2 )';


                        let reported = new Date(date_reported)
                        let difference = end_date.getTime() - reported.getTime()
                        let total_minutes = Math.round(difference / 60000)
                        let total_hours = Math.round(difference / 3600000)

                        let idx = linis.findIndex(item => item.hasOwnProperty(lini))
                        linis[idx][lini].minutes += total_minutes
                        linis[idx][lini].hours += total_hours

                        cases_background_colors.push(rgba)
                        cases_border_colors.push(rgb)
                    }
                } else {
                    obj = {
                        [lini]: { minutes: 0, hours: 0 }
                    }
                    linis.push(obj)
                }
            })
            linis.forEach((el, index) => {
                Object.keys(el).map((element, idx) => {
                    cases_labels.push(element)
                })
                Object.values(el).map((element, idx) => {
                    cases_minutes.push(element.minutes)
                    cases_hours.push(element.hours)
                })
            })
            console.log(linis)
        }

        function initChart1() {
            const ctx = document.getElementById('chart1')
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: cases_labels,
                    datasets: [{
                        label: 'Counting Date Approval (Minutes)',
                        data: cases_minutes,
                        borderWidth: 1,
                        backgroundColor: cases_background_colors,
                        borderColor: cases_border_colors,
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            })
        }

        function initChart2() {
            const ctx = document.getElementById('chart2')
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: cases_labels,
                    datasets: [{
                        label: '# of Votes',
                        data: cases_minutes,
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            })
        }

        function initChart3() {
            const ctx = document.getElementById('chart3')
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: cases_labels,
                    datasets: [{
                        label: 'Counting Date Approval (Hours)',
                        data: cases_hours,
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            })
        }

        document.addEventListener('DOMContentLoaded', async () => {
            await initData()
            initChart1()
            initChart2()
            initChart3()
        })
    </script>
}