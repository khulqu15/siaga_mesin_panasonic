@model panasonic_machine_checker.Models.JobOrdersModel;
@{
    Layout = "~/Views/Shared/_App_Layout.cshtml";
    var userList = ViewBag.UserList as List<Users>;
    var statusList = ViewBag.StatusList as List<StatusJobOrders>;
    var caseList = ViewBag.CaseList as List<Cases>;
}

<div class="w-full bg-base-100 p-6 rounded-xl mt-5">
    <input type="checkbox" id="delete_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box">
            <h3 class="font-bold text-lg">Delete Schedule ?</h3>
            <p class="text-sm">The Schedule data will be deleted permanently</p>
            <div class="modal-action">
                <label for="delete_modal" class="btn">Cancel</label>
                <button id="deleteBtn" class="btn btn-error text-white">Delete</button>
            </div>
        </div>
    </div>

    <div>
        <div class="flex items-center justify-between w-full mb-3">
            <h1 class="font-semibold">Job Orders <span class="badge badge-primary">@Model.JobOrdersList.Count</span></h1>
            <div>
                <label for="form_modal" class="btn btn-sm btn-primary" id="btnAdd">Add new</label>
                <select class="select w-24 select-sm select-bordered" id="sort-filter">
                    <option disabled selected>Terbaru</option>
                    <option>Terlama</option>
                </select>
            </div>
        </div>
        <div class="overflow-x-auto">
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th></th>
                        <th>Case</th>
                        <th>Reviewed By</th>
                        <th>Deadline</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.JobOrdersList.Count > 0)
                    {
                        int counter = 1;
                        @foreach (var item in Model.JobOrdersList)
                        {
                            <tr id="item-@item.Id">
                                <th class="item_counter">@counter</th>
                                <td class="item_case_id hidden">@item.CaseId</td>
                                <td class="item_case">@item.Case.Machine.Name by @item.Case.ReportedByNavigation.Name</td>
                                <td class="item_scheduled_by_id hidden">@item.ScheduledById</td>
                                <td class="item_status_id hidden">@item.StatusId</td>
                                <td class="item_reviewed_by">@item.ScheduledBy.Name</td>
                                <td class="case_date_completed">@item.ScheduledDate</td>
                                <td>
                                    @if (item.ScheduledDate.HasValue)
                                    {
                                        <p class="mb-1">@item.ScheduledDate?.ToString("dd/MM/yyyy HH:mm")</p>
                                        <span class="badge @GetTimeDiffClass(item.ScheduledDate)">@FormatTimeDifference(item.ScheduledDate)</span>
                                    }
                                </td>
                                <td class="item_status">@item.Status.Name</td>
                                <td>
                                    <label for="delete_modal" data-itemid="@item.Id" class="btn btnDelete btn-error btn-sm">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z" /></svg>
                                    </label>
                                </td>
                            </tr>
                            counter++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7">
                                <div class="w-full bg-error text-white p-3 rounded-xl text-center">
                                    Job Order Data Not Found
                                </div>
                            </td>
                        </tr>
                    }
                <tfoot>
                    <tr>
                        <th></th>
                        <th>Case</th>
                        <th>Reviewed By</th>
                        <th>Deadline</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div class="w-full flex mt-10 justify-end">
            <div class="join">
                <button class="btn join-item" onclick="location.href='@Url.Action("LeaderJobOrder", new { page = Model.CurrentPage - 1 })'" @(Model.CurrentPage == 1 ? "disabled" : "")><</button>
                @for (int i = 1; i <= Math.Ceiling((double)Model.TotalItems / Model.PageSize); i++)
                {
                    <button class="btn join-item @(Model.CurrentPage == i ? "btn-primary" : "")" onclick="location.href='@Url.Action("Machines", new { page = i })'">@i</button>
                }
                <button class="btn join-item" onclick="location.href='@Url.Action("LeaderJobOrder", new { page = Model.CurrentPage + 1 })'" @(Model.CurrentPage * Model.PageSize >= Model.TotalItems ? "disabled" : "")>></button>
            </div>
        </div>
    </div>
</div>

@functions {
    public static string GetTimeDiffClass(DateTime? targetDate)
    {
        if (!targetDate.HasValue)
        {
            return "badge-error text-white";
        }

        TimeSpan timeDiff = DateTime.Now - targetDate.Value;
        if (timeDiff.TotalDays < 0)
        {
            if (timeDiff.Days == -1)
            {
                return "badge-warning";
            }
            else
            {
                return "badge-success text-white";
            }
        }
        else
        {
            if (timeDiff.Days == 0)
            {
                return "badge-warning";
            }
            else
            {
                return "badge-error text-white";
            }
        }
    }
    public static string FormatTimeDifference(DateTime? targetDate)
    {
        if (!targetDate.HasValue)
        {
            return "Date not specified";
        }

        TimeSpan timeDiff = DateTime.Now - targetDate.Value;

        if (timeDiff.TotalSeconds < 0)
        {
            timeDiff = timeDiff.Negate();

            if (timeDiff.Days > 1)
            {
                return $"{timeDiff.Days} days from now";
            }
            else if (timeDiff.Days == 1)
            {
                return "Tomorrow";
            }
            else if (timeDiff.Hours > 0)
            {
                return $"{timeDiff.Hours} hours from now";
            }
            else if (timeDiff.Minutes > 0)
            {
                return $"{timeDiff.Minutes} minutes from now";
            }
            else
            {
                return "In the future";
            }
        }

        if (timeDiff.Days > 1)
        {
            return $"{timeDiff.Days} days ago";
        }
        else if (timeDiff.Days == 1)
        {
            return "Yesterday";
        }
        else if (timeDiff.Hours > 0)
        {
            return $"{timeDiff.Hours} hours ago";
        }
        else if (timeDiff.Minutes > 0)
        {
            return $"{timeDiff.Minutes} minutes ago";
        }
        else
        {
            return "Just now";
        }
    }
}


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            let data = null

            document.getElementById('sort-filter').addEventListener('change', (event) => {
                window.location.href = '?page=1&sortOrder=' + event.target.value;
            })

            Array.from(document.getElementsByClassName('btnDelete')).map((element, index) => {
                element.addEventListener('click', (event) => {
                    data = event.target.getAttribute('data-itemid')
                })
            })

            function deleteMachine() {
                fetch('/Production/DeleteJobOrder/' + data, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ id: data })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Job Orders Data deleted');
                            document.getElementById('delete_modal').click()
                            setTimeout(() => {
                                window.location.reload()
                            }, 300)
                        } else {
                            alert('Error deleting Job Orders Data');
                        }
                    });
            }

            document.getElementById('deleteBtn').addEventListener('click', function () {
                deleteMachine();
            });
        })
    </script>
}