@model panasonic_machine_checker.Models.JobOrdersModel;
@{
    Layout = "~/Views/Shared/_App_Layout.cshtml";
    var userList = ViewBag.UserList as List<Users>;
    var statusList = ViewBag.StatusList as List<StatusJobOrders>;
    var caseList = ViewBag.CaseList as List<Cases>;
}

<div class="w-full bg-base-100 p-6 rounded-xl mt-5">
    <input type="checkbox" id="form_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box max-w-xl">
            <h3 class="font-bold text-lg">Job Orders Form</h3>
            <form id="formData">
                <div class="form-control my-3">
                    <label for="case_id">Select Case</label>
                    <select required class="select select-bordered w-full mt-1" id="case_id" name="case">
                        <option value="" disabled selected>Select Case</option>
                        @foreach (var item in caseList)
                        {
                            <option disabled value="@item.Id">@item.Id, @item.Machine.Name by @item.ReportedByNavigation.Name</option>
                        }
                    </select>
                </div>
                <div class="form-control my-3">
                    <label for="scheduled_by">Scheduled By</label>
                    <select required class="select select-bordered w-full text-black mt-1" id="scheduled_by" name="scheduled_by">
                        <option value="" disabled selected>Select User</option>
                        @foreach (var item in userList)
                        {
                            <option disabled value="@item.Id">@item.Name (@item.Email)</option>
                        }
                    </select>
                </div>
                <div class="form-control my-3">
                    <label for="status_id">Status</label>
                    <select required class="select select-bordered w-full text-black mt-1" id="status_id" name="status_id">
                        <option value="" disabled selected>Select Status</option>
                        @foreach (var item in statusList)
                        {
                            <option disabled value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
                <div class="form-control my-3">
                    <label for="repair_date">Scheduled date</label>
                    <input type="date" id="scheduled_date" name="scheduled_date" class="input input-bordered w-full" />
                </div>
                <div class="modal-action">
                    <label for="form_modal" class="btn">Cancel</label>
                    <button type="submit" class="btn btn-primary text-white">Submit Data</button>
                </div>
            </form>
        </div>
    </div>

    <input type="checkbox" id="delete_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box">
            <h3 class="font-bold text-lg">Delete Schedule ?</h3>
            <p class="text-sm">The Schedule data will be deleted permanently</p>
            <div class="modal-action">
                <label for="delete_modal" class="btn">Cancel</label>
                <button id="deleteBtn" class="btn btn-error text-white">Delete</button>
            </div>
        </div>
    </div>

    <div>
        <div class="flex items-center justify-between w-full mb-3">
            <h1 class="font-semibold">Job Orders <span class="badge badge-primary">@Model.JobOrdersList.Count</span></h1>
            <div>
                <select class="select w-24 select-sm select-bordered" id="sort-filter">
                    <option disabled selected>Terbaru</option>
                    <option>Terlama</option>
                </select>
            </div>
        </div>
        <div class="overflow-x-auto">
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th></th>
                        <th>Case</th>
                        <th>Reviewed By</th>
                        <th>Reviewed At</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.JobOrdersList.Count > 0)
                    {
                        int counter = 1;
                        @foreach (var item in Model.JobOrdersList)
                        {
                            <tr id="item-@item.Id">
                                <th class="item_counter">@counter</th>
                                <td class="item_case_id hidden">@item.CaseId</td>
                                <td class="item_case"><span class="badge badge-primary">@item.Case.Id</span> @item.Case.Machine.Name by @item.Case.ReportedByNavigation.Name</td>
                                <td class="item_scheduled_by_id hidden">@item.ScheduledById</td>
                                <td class="item_status_id hidden">@item.StatusId</td>
                                <td class="item_reviewed_by">@item.ScheduledBy.Name</td>
                                <td class="item_reviewed_date">@item.Case.DateCompleted</td>
                                <td class="item_status">@item.Status.Name</td>
                                <td>
                                    <label for="form_modal" data-itemid="@item.Id" class="btn btnEdit btn-primary btn-sm">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="m11.4 18.161l7.396-7.396a10.289 10.289 0 0 1-3.326-2.234a10.29 10.29 0 0 1-2.235-3.327L5.839 12.6c-.577.577-.866.866-1.114 1.184a6.556 6.556 0 0 0-.749 1.211c-.173.364-.302.752-.56 1.526l-1.362 4.083a1.06 1.06 0 0 0 1.342 1.342l4.083-1.362c.775-.258 1.162-.387 1.526-.56c.43-.205.836-.456 1.211-.749c.318-.248.607-.537 1.184-1.114m9.448-9.448a3.932 3.932 0 0 0-5.561-5.561l-.887.887l.038.111a8.754 8.754 0 0 0 2.092 3.32a8.754 8.754 0 0 0 3.431 2.13z" /></svg>
                                        Set Schedule
                                    </label>
                                    <label for="delete_modal" data-itemid="@item.Id" class="btn btnDelete btn-error btn-sm">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z" /></svg>
                                    </label>
                                </td>
                            </tr>
                            counter++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7">
                                <div class="w-full bg-error text-white p-3 rounded-xl text-center">
                                    Job Order Data Not Found
                                </div>
                            </td>
                        </tr>
                    }
                <tfoot>
                    <tr>
                        <th></th>
                        <th>Case</th>
                        <th>Reviewed By</th>
                        <th>Reviewed At</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div class="w-full flex mt-10 justify-end">
            <div class="join">
                <button class="btn join-item" onclick="location.href='@Url.Action("Machines", new { page = Model.CurrentPage - 1 })'" @(Model.CurrentPage == 1 ? "disabled" : "")><</button>
                @for (int i = 1; i <= Math.Ceiling((double)Model.TotalItems / Model.PageSize); i++)
                {
                    <button class="btn join-item @(Model.CurrentPage == i ? "btn-primary" : "")" onclick="location.href='@Url.Action("Machines", new { page = i })'">@i</button>
                }
                <button class="btn join-item" onclick="location.href='@Url.Action("Machines", new { page = Model.CurrentPage + 1 })'" @(Model.CurrentPage * Model.PageSize >= Model.TotalItems ? "disabled" : "")>></button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let user_id = 1
        let data = null

        let checkToken = sessionStorage.getItem('authToken')
        if (checkToken != null && checkToken != undefined) {
            let separator = checkToken.split('-')
            let role = separator.pop()
            let suffix = checkToken.split('-')[1]
            let user_id_selection = checkToken.slice(5, checkToken.indexOf('-'))
            user_id = parseInt(checkToken.split("-")[1])
        } else window.location.href = "/Login"


        function updateMachine() {
            let case_id = parseInt(document.getElementById('case_id').value);
            let scheduled_by = parseInt(document.getElementById('scheduled_by').value);
            let scheduled_date = document.getElementById('scheduled_date').value;
            let status_id = document.getElementById('status_id').value;
            let case_data = {
                CaseId: case_id,
                ScheduledBy: scheduled_by,
                ScheduledDate: scheduled_date,
                StatusId: status_id,
            }
            if (data != null) case_data.Id = data
            let url = data != null ? '/Production/UpdateJobOrder/' + data : '/Production/CreateJobOrder';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(case_data)
            })
                .then((response) => response.json())
                .then((data) => {
                    generateRepairSchedule(data.job_order)
                    alert('Job Orders Data Saved');
                })
        }

        function generateRepairSchedule(job_order) {
            fetch('/Production/CreateRepairSchedule', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    StatusId: job_order.statusId,
                    CaseId: job_order.caseId,
                    ScheduledBy: user_id,
                    CallDate: job_order.scheduledDate,
                    RepairDate: job_order.scheduledDate,
                })
            })
                .then((response) => response.json())
                .then((data) => {
                    setTimeout(() => {
                        generateMachineRepair(data.schedule, job_order)
                        alert('Repair Schedule Data Saved');
                    }, 300)
                })
        }

        function generateMachineRepair(schedule, job_order) {
            console.log("Schedule", schedule)
            console.log("Job Order", job_order)
            fetch('/Production/CreateMachineRepairs', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ScheduleId: schedule.id,
                    ReviewedBy: user_id,
                    StatusId: job_order.statusId,
                    RepairDate: schedule.repairDate,
                    Corrections: null,
                    Result: null,
                })
            })
                .then((response) => response.json())
                .then((data) => {
                    setTimeout(() => {
                        alert('Machine Repairs Data Saved');
                        document.getElementById('form_modal').click()
                        setTimeout(() => {
                            window.location.reload()
                        }, 300)
                    }, 300)
                })
        }

        document.getElementById('sort-filter').addEventListener('change', (event) => {
            window.location.href = '?page=1&sortOrder=' + event.target.value;
        })

        Array.from(document.getElementsByClassName('btnEdit')).map((element, index) => {
            element.addEventListener('click', (event) => {
                data = event.target.getAttribute('data-itemid')
                setTimeout(() => {
                    let itemData = document.getElementById('item-' + data)
                    const reviewedAt = new Date(itemData.querySelector('.item_reviewed_date').innerHTML);
                    document.getElementById('case_id').value = Array.from(itemData.getElementsByClassName('item_case_id'))[0].innerHTML
                    document.getElementById('status_id').value = Array.from(itemData.getElementsByClassName('item_status_id'))[0].innerHTML
                    document.getElementById('scheduled_by').value = Array.from(itemData.getElementsByClassName('item_scheduled_by_id'))[0].innerHTML
                    document.getElementById('scheduled_date').value = reviewedAt.toISOString().split('T')[0]
                }, 300)
            })
        })
        Array.from(document.getElementsByClassName('btnDelete')).map((element, index) => {
            element.addEventListener('click', (event) => {
                data = event.target.getAttribute('data-itemid')
            })
        })

        function deleteMachine() {
            fetch('/Admin/DeleteJobOrder/' + data, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: data })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Job Orders Data deleted');
                        document.getElementById('delete_modal').click()
                        setTimeout(() => {
                            window.location.reload()
                        }, 300)
                    } else {
                        alert('Error deleting Job Orders Data');
                    }
                });
        }

        document.getElementById('formData').addEventListener('submit', (event) => {
            event.preventDefault()
            updateMachine()
        });
        document.getElementById('deleteBtn').addEventListener('click', function () {
            deleteMachine();
        });
    </script>
}