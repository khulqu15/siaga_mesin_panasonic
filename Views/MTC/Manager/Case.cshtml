@model panasonic_machine_checker.Models.CasesModel;
@{
    var repairScheduleList = ViewBag.RepairScheduleList as List<RepairSchedules>;
    var machineList = ViewBag.MachineList as List<Machines>;
    var userList = ViewBag.UserList as List<Users>;
    var statusList = ViewBag.StatusList as List<StatusCases>;
    Layout = "~/Views/Shared/_App_Layout.cshtml";
}

<div class="w-full bg-base-100 p-6 rounded-xl mt-5">

    <input type="checkbox" id="call_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box max-w-xl">
            <h3 class="font-bold text-lg">Call Vendor Form</h3>
            <form id="formCallData">
                <div class="form-control my-3 hidden">
                    <label for="call_case_id">Case Id</label>
                    <input type="text" id="call_case_id" name="call_case_id" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="call_case_name">Selected Case</label>
                    <input type="text" id="call_case_name" name="call_case_name" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3 hidden">
                    <label for="call_reported_by_id">Scheduled By</label>
                    <input type="text" id="call_reported_by_id" name="call_reported_by_id" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="call_reported_by">Scheduled By</label>
                    <input type="text" id="call_reported_by" name="call_reported_by" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="call_call_date">Call with vendor (date)</label>
                    <input type="date" id="call_call_date" name="call_call_date" required class="input input-bordered w-full" />
                </div>
                <div class="modal-action">
                    <label for="call_modal" class="btn">Cancel</label>
                    <button type="submit" class="btn btn-primary text-white">Save schedule</button>
                </div>
            </form>
        </div>
    </div>

    <input type="checkbox" id="kyt_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box max-w-xl">
            <h3 class="font-bold text-lg">Take Case (KYT Form)</h3>
            <form id="formKYTData">
                <div class="form-control my-3 hidden">
                    <label for="kyt_case_id">Case Id</label>
                    <input type="text" id="kyt_case_id" name="call_case_id" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="kyt_case_name">Selected Case</label>
                    <input readonly type="text" id="kyt_case_name" name="kyt_case_name" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3 hidden">
                    <label for="kyt_filled_by_id">Filled By</label>
                    <input readonly type="text" id="kyt_filled_by_id" name="kyt_filled_by_id" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="kyt_filled_by_name">Filled By</label>
                    <input readonly type="text" id="kyt_filled_by" name="kyt_filled_by" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="potential_hazard">Potential Hazard</label>
                    <textarea id="potential_hazard" name="potential_hazard" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="modal-action">
                    <label for="kyt_modal" class="btn">Cancel</label>
                    <button type="submit" class="btn btn-primary text-white">Take Case</button>
                </div>
            </form>
        </div>
    </div>


    <input type="checkbox" id="machine_repair_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box max-w-xl">
            <h3 class="font-bold text-lg">Machine Repairs Form</h3>
            <form id="machineRepairData">
                <div class="form-control my-3">
                    <label for="schedule_id">Select Schedule</label>
                    <select required class="select select-bordered w-full mt-1" id="schedule_id" name="schedule_id">
                        <option value="" disabled selected>Select Scheduled Repair</option>
                        @foreach (var item in repairScheduleList)
                        {
                            <option class="case-data case-@item.Case.Id" value="@item.Id">@item.Id, @item.CallDate @item.Case.ReportedByNavigation.Name</option>
                        }
                    </select>
                </div>
                <div class="form-control my-3">
                    <label for="reviewed_by">Reviewed By</label>
                    <select required class="select select-bordered w-full text-black mt-1" id="reviewed_by" name="reviewed_by">
                        <option value="" disabled selected>Select User</option>
                        @foreach (var item in userList)
                        {
                            <option value="@item.Id">@item.Name (@item.Email)</option>
                        }
                    </select>
                </div>
                <div class="form-control my-3">
                    <label for="repair_date">Repair date</label>
                    <input type="date" id="repair_date" name="repair_date" class="input input-bordered w-full" />
                </div>
                <div class="modal-action">
                    <label for="machine_repair_modal" class="btn">Cancel</label>
                    <button type="submit" class="btn btn-primary text-white">Submit Data</button>
                </div>
            </form>
        </div>
    </div>

    <input type="checkbox" id="form_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box max-w-xl">
            <h3 class="font-bold text-lg">Case's Form</h3>
            <form id="formData">
                <div class="form-control my-3">
                    <label for="machine_id">Select Machine</label>
                    <select required class="select select-bordered w-full mt-1" id="machine_id" name="machine_id">
                        <option value="" disabled selected>Select Machine</option>
                        @foreach (var machine in machineList)
                        {
                            <option value="@machine.Id">@machine.Name</option>
                        }
                    </select>
                </div>
                <div class="form-control my-3 hidden">
                    <label for="reported_at_id">Reported By (Id)</label>
                    <input readonly type="text" class="input input-bordered w-full" id="reported_by_id" name="reported_by_id" />
                </div>
                <div class="form-control my-3">
                    <label for="reported_at_id">Reported By</label>
                    <input readonly type="text" class="input input-bordered w-full" id="reported_by" name="reported_by" />
                </div>
                <div class="form-control my-3">
                    <label for="status">Current Status</label>
                    <select required class="select select-bordered w-full mt-1" id="status" name="status">
                        <option value="" disabled selected>Select Status</option>
                        @foreach (var status in statusList)
                        {
                            <option value="@status.Id">@status.Name</option>
                        }
                    </select>
                </div>
                <div class="form-control my-3">
                    <label for="reported_at">Completed At</label>
                    <input type="date" class="input input-bordered w-full" id="completed_at" name="completed_at" />
                </div>
                <div class="form-control my-3">
                    <label for="reported_at">Description</label>
                    <textarea type="date" class="textarea textarea-bordered w-full" id="description" name="description"></textarea>
                </div>
                <div class="modal-action">
                    <label for="form_modal" class="btn">Cancel</label>
                    <button type="submit" class="btn btn-primary text-white">Approve</button>
                </div>
            </form>
        </div>
    </div>

    <input type="checkbox" id="delete_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box">
            <h3 class="font-bold text-lg">Delete Case ?</h3>
            <p class="text-sm">The case data will be deleted permanently</p>
            <div class="modal-action">
                <label for="delete_modal" class="btn">Cancel</label>
                <button id="deleteBtn" class="btn btn-error text-white">Delete</button>
            </div>
        </div>
    </div>

    <div>
        <div class="flex items-center justify-between w-full mb-3">
            <div class="flex items-center justify-between w-full mb-3">
                <h1 class="font-semibold">Cases <span class="badge badge-primary">@Model.TotalItems</span></h1>
                <div>
                    <button class="btn btn-primary btn-sm btnExport" id="btnExport">Export Excel</button>
                    <select class="select w-24 select-sm select-bordered" id="sort-filter">
                        <option disabled selected>Select Order</option>
                        <option value="newest">Terbaru (Newest)</option>
                        <option value="oldest">Terlama (Oldest)</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="overflow-x-auto">
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th></th>
                        <th>Machine</th>
                        <th>Reported By</th>
                        <th>Reported At</th>
                        <th>Deadline</th>
                        <th>Status</th>
                        <th>Description</th>
                        <th>Approval</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.CasesList.Count > 0)
                    {
                        int counter = 1;
                        foreach (var item in Model.CasesList)
                        {
                            <tr class="case_list" id="item-@item.Id">
                                <th class="case_counter">@counter</th>
                                <td class="hidden case_machine_id">@item.MachineId</td>
                                <td class="case_machine">@item.Machine.Name</td>
                                <td class="hidden case_reported_by_id">@item.ReportedById</td>
                                <td class="case_reported_by">@item.ReportedByNavigation.Name</td>
                                <td class="case_date_reported">@item.DateReported</td>
                                <td class="hidden case_date_completed">@item.DateCompleted</td>
                                <td>
                                    @if (item.DateCompleted.HasValue)
                                    {
                                        <p class="mb-1">@item.DateCompleted?.ToString("dd/MM/yyyy HH:mm")</p>
                                        <span class="div py-1 rounded px-2 text-xs @GetTimeDiffClass(item.DateCompleted)">@FormatTimeDifference(item.DateCompleted)</span>
                                    }
                                </td>
                                <td class="case_bu_name hidden">@item.BU.Name</td>
                                <td class="case_lini_name hidden">@item.Lini.Name</td>
                                <td class="hidden case_status_id">@item.StatusId</td>
                                <td class="hidden case_closed">
                                    @if (@item.ClosedData != null)
                                    {
                                        @item.ClosedData.Name
                                    }
                                </td>
                                <td class="hidden case_potential_hazard">
                                    @foreach (var potential in item.Kytforms)
                                    {
                                        @potential.PotentialHazard
                                    }
                                </td>
                                <td class="case_analysis hidden">
                                    @foreach (var potential in item.Kytforms)
                                    {
                                        @potential.Description
                                    }
                                </td>
                                <td class="case_status">@item.Status.Name</td>
                                <td class="case_description">@item.Description</td>
                                <td class="case_approval">
                                    @if (item.IsApproved == 1)
                                    {
                                        <span class="badge badge-success text-white">Approved</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-error text-white">Waiting</span>
                                    }
                                </td>
                            </tr>
                            counter++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7">
                                <div class="w-full bg-error text-white p-3 rounded-xl text-center">
                                    Cases Not Found
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th></th>
                        <th>Machine</th>
                        <th>Reported By</th>
                        <th>Reported At</th>
                        <th>Deadline</th>
                        <th>Status</th>
                        <th>Description</th>
                        <th>Approval</th>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div class="w-full flex mt-10 justify-end">
            <div class="join">
                <button class="btn join-item" onclick="location.href='@Url.Action("Leader", new { page = Model.CurrentPage - 1 })'" @(Model.CurrentPage == 1 ? "disabled" : "")><</button>
                @for (int i = 1; i <= Math.Ceiling((double)Model.TotalItems / Model.PageSize); i++)
                {
                    <button class="btn join-item @(Model.CurrentPage == i ? "btn-primary" : "")" onclick="location.href='@Url.Action("Leader", new { page = i })'">@i</button>
                }
                <button class="btn join-item" onclick="location.href='@Url.Action("Leader", new { page = Model.CurrentPage + 1 })'" @(Model.CurrentPage * Model.PageSize >= Model.TotalItems ? "disabled" : "")>></button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.1/xlsx.full.min.js"></script>

    <script>
        let user_id = 0
        let user_name = ''
        let case_id = 0
        let case_name = ''

        function exportExcel() {
            filename = 'exported_case.xlsx'
            excel_data = []
            console.log(Array.from(document.getElementsByClassName('case_list')))
            Array.from(document.getElementsByClassName('case_list')).map((element, index) => {
                let xlsx_machine_name = Array.from(element.getElementsByClassName('case_machine'))[0].innerHTML
                let xlsx_reported_at = Array.from(element.getElementsByClassName('case_date_reported'))[0].innerHTML
                let xlsx_reported_by = Array.from(element.getElementsByClassName('case_reported_by'))[0].innerHTML
                let xlsx_completed_at = Array.from(element.getElementsByClassName('case_date_completed'))[0].innerHTML
                let xlsx_site_name = Array.from(element.getElementsByClassName('case_lini_name'))[0].innerHTML
                let xlsx_section = Array.from(element.getElementsByClassName('case_bu_name'))[0].innerHTML
                let xlsx_trouble = Array.from(element.getElementsByClassName('case_description'))[0].innerHTML
                let xlsx_analytics = Array.from(element.getElementsByClassName('case_analysis'))[0].innerHTML
                let xlsx_action = Array.from(element.getElementsByClassName('case_potential_hazard'))[0].innerHTML
                let xlsx_closed = Array.from(element.getElementsByClassName('case_closed'))[0].innerHTML

                let total_minutes = 0
                let total_hours = 0
                if (xlsx_reported_at != null) {
                    let end_date = new Date()
                    if (xlsx_completed_at != null) end_date = new Date(xlsx_completed_at)

                    let num = Math.round(0xffffff * Math.random())

                    let reported = new Date(xlsx_reported_at)
                    let difference = Math.abs(end_date.getTime() - reported.getTime())
                    total_minutes = Math.round(difference / 60000)
                    total_hours = Math.round(difference / 3600000)
                }
                let xlsx_duration = total_minutes
                let xlsx_duration_hour = total_hours

                excel_data.push({
                    '#': index + 1,
                    'Issued': xlsx_machine_name + ' - ' + xlsx_reported_at,
                    'Finished': xlsx_completed_at,
                    'Section': xlsx_site_name,
                    'Site Name': xlsx_section,
                    'Trouble': xlsx_trouble,
                    'Analisis': xlsx_analytics,
                    'Action': xlsx_action,
                    'Duration': xlsx_duration_hour + ' Hour, ' + xlsx_duration + ' Minutes',
                    'Closed': xlsx_closed
                })
            })
            console.log(excel_data)
            var ws = XLSX.utils.json_to_sheet(excel_data);
            var wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "People");
            XLSX.writeFile(wb, filename);
        }

        document.getElementById('btnExport').addEventListener('click', (event) => {
            event.preventDefault()
            exportExcel()
        })

        let checkToken = sessionStorage.getItem('authToken')
        if (checkToken != null && checkToken != undefined) {
            let separator = checkToken.split('-')
            let role = separator.pop()
            let suffix = checkToken.split('-')[1]
            let user_id_selection = checkToken.slice(5, checkToken.indexOf('-'))
            user_id = parseInt(checkToken.split("-")[1])

            fetchUser(user_id, role)
        } else window.location.href = "/Login"

        function fetchUser(user_id, role) {
            fetch("/Admin/UserData/" + user_id, {
                method: "GET",
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then((response) => {
                    return response.json()
                })
                .then((data) => {
                    console.log(data.data)
                    document.getElementById('call_reported_by').value = data.data.name
                    document.getElementById('call_reported_by_id').value = data.data.id
                    document.getElementById('kyt_filled_by').value = data.data.name
                    document.getElementById('kyt_filled_by_id').value = data.data.id
                    document.getElementById('reported_by').value = data.data.name
                    document.getElementById('reported_by_id').value = data.data.id
                })
        }


        function updateMachineRepair() {
            let schedule_id = parseInt(document.getElementById('schedule_id').value);
            let reviewed_by = parseInt(document.getElementById('reviewed_by').value);
            let repair_date = document.getElementById('repair_date').value;
            let case_data = {
                ScheduleId: schedule_id,
                ReviewedBy: reviewed_by,
                StatusId: 1,
                RepairDate: repair_date,
                Corrections: ' ',
                Result: ' ',
            }
            let url ='/MTC/Leader/CreateMachineRepairs';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(case_data)
            })
                .then((response) => response.json())
                .then((data) => {
                    alert('Machine Repair Data Saved');
                    document.getElementById('machine_repair_modal').click()
                    setTimeout(() => {
                        window.location.reload()
                    }, 300)
                })
        }

        async function updateCallVendor() {
            let case_id = parseInt(document.getElementById('call_case_id').value);
            let scheduled_by = parseInt(document.getElementById('call_reported_by_id').value);
            let call_date = new Date(document.getElementById('call_call_date').value)
            let case_data = {
                StatusId: 1,
                CaseId: case_id,
                ScheduledBy: scheduled_by,
                CallDate: call_date,
                RepairDate: call_date,
            }
            let url = '/Mtc/Leader/CreateRepairSchedule';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(case_data)
            })
                .then((response) => response.json())
                .then((data) => {
                    alert('Repair Schedule Data Saved');
                    document.getElementById('call_modal').click()
                    setTimeout(() => {
                        window.location.reload()
                    }, 300)
                })
        }

        let data = null
        function updateMachine() {
            let machine_id = parseInt(document.getElementById('machine_id').value);
            let reported_by = parseInt(document.getElementById('reported_by_id').value);
            let status_id = parseInt(document.getElementById('status').value);
            let date = new Date();
            date.setHours(date.getHours() + 1)
            date.setMinutes(date.getMinutes() + 30)
            date.setSeconds(date.getSeconds() + 45)
            let date_reported = date.toISOString();
            let date_completed = document.getElementById('completed_at').value;
            let description = document.getElementById('description').value;
            let case_data = {
                Description: description,
                MachineId: machine_id,
                ReportedById: reported_by,
                StatusId: status_id,
                DateReported: date_reported,
                DateCompleted: date_completed,
                IsApproved: 1,
            }
            if (data != null) case_data.Id = data
            let url = data != null ? '/MTC/Leader/UpdateCase/' + data : '/MTC/Leader/CreateCase';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(case_data)
            })
                .then((response) => response.json())
                .then((data) => {
                    alert('Case Approved')
                    document.getElementById('form_modal').click()
                    document.getElementById('kyt_modal').click()
                })
        }

        function generateJobOrder(case_data) {
            console.log(case_data)
            let scheduled_date = new Date(case_data.dateCompleted)
            fetch('/Production/CreateJobOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    CaseId: case_data.id,
                    ScheduledBy: user_id,
                    ScheduledDate: scheduled_date.toISOString().split('T')[0],
                    StatusId: case_data.statusId,
                })
            })
                .then((response) => response.json())
                .then((data) => {
                    alert('Case Saved');
                    document.getElementById('form_modal').click()
                    setTimeout(() => {
                        window.location.reload()
                    }, 300)
                })
        }

        function updateKYT() {
            let case_id = parseInt(document.getElementById('kyt_case_id').value);
            let filled_by = parseInt(document.getElementById('kyt_filled_by_id').value);
            let potential_hazard = document.getElementById('potential_hazard').value;
            let case_data = {
                CaseId: case_id,
                FilledBy: filled_by,
                PotentialHazard: potential_hazard,
                Approval: 0,
            }
            let url = '/MTC/Leader/CreateKYTForms';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(case_data)
            })
                .then((response) => response.json())
                .then((data) => {
                    alert('KYT Forms Data Saved');
                    setTimeout(() => {
                        window.location.reload()
                    }, 300)
                })
        }

        document.getElementById('sort-filter').addEventListener('change', (event) => {
            window.location.href = '?page=1&sortOrder=' + event.target.value;
        })

        Array.from(document.getElementsByClassName('btnEdit')).map((element, index) => {
            element.addEventListener('click', async (event) => {
                data = await event.target.getAttribute('data-itemid')
                case_id = await event.target.getAttribute('data-itemid')
                case_name = await event.target.getAttribute('data-reportedby') + ' - ' + event.target.getAttribute('data-casename')
                document.getElementById('kyt_case_id').value = case_id
                document.getElementById('kyt_case_name').value = case_name
                let itemData = document.getElementById('item-' + data)
                const completedAt = new Date(itemData.querySelector('.case_date_completed').innerHTML);
                document.getElementById('machine_id').value = Array.from(itemData.getElementsByClassName('case_machine_id'))[0].innerHTML
                document.getElementById('status').value = Array.from(itemData.getElementsByClassName('case_status_id'))[0].innerHTML
                document.getElementById('completed_at').value = completedAt.toISOString().split('T')[0];
                document.getElementById('description').value = Array.from(itemData.getElementsByClassName('case_description'))[0].innerHTML
            })
        })
        Array.from(document.getElementsByClassName('btnDelete')).map((element, index) => {
            element.addEventListener('click', (event) => {
                data = event.target.getAttribute('data-itemid')
            })
        })
        Array.from(document.getElementsByClassName('btnCall')).map((element, index) => {
            element.addEventListener('click', async (event) => {
                data = await event.target.getAttribute('data-itemid')
                let casename = await event.target.getAttribute('data-casename')
                let reportedby = await event.target.getAttribute('data-reportedby')
                document.getElementById('call_case_id').value = data
                document.getElementById('call_case_name').value = casename + ' by ' + reportedby
            })
        })
        Array.from(document.getElementsByClassName('btnSchedules')).map(async (element, index) => {
            await Array.from(document.getElementsByClassName('case-data')).map((el, idx) => {
                el.classList.add('hidden')
            })
            element.addEventListener('click', async (event) => {
                data = await event.target.getAttribute('data-itemid')
                Array.from(document.getElementsByClassName('case-'+data)).map((el, idx) => {
                    el.classList.remove('hidden')
                })
            })
        })

        function deleteMachine() {
            fetch('/Admin/DeleteCase/' + data, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: data })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Case deleted');
                        document.getElementById('delete_modal').click()
                        setTimeout(() => {
                            window.location.reload()
                        }, 300)
                    } else {
                        alert('Error deleting case');
                    }
                });
        }

        document.getElementById('formData').addEventListener('submit', (event) => {
            event.preventDefault()
            updateMachine()
        });
        document.getElementById('formCallData').addEventListener('submit', (event) => {
            event.preventDefault()
            updateCallVendor()
        });
        document.getElementById('machineRepairData').addEventListener('submit', (event) => {
            event.preventDefault()
            updateMachineRepair()
        })
        document.getElementById('formKYTData').addEventListener('submit', (event) => {
            event.preventDefault()
            updateKYT()
        })

        document.getElementById('deleteBtn').addEventListener('click', function () {
            deleteMachine();
        });

    </script>
}


@functions {
    public static string GetTimeDiffClass(DateTime? targetDate)
    {
        if (!targetDate.HasValue)
        {
            return "badge-error text-white";
        }

        TimeSpan timeDiff = DateTime.Now - targetDate.Value;
        if (timeDiff.TotalDays < 0)
        {
            if (timeDiff.Days == -1)
            {
                return "badge-warning";
            }
            else
            {
                return "badge-success text-white";
            }
        }
        else
        {
            if (timeDiff.Days == 0)
            {
                return "badge-warning";
            }
            else
            {
                return "badge-error text-white";
            }
        }
    }
    public static string FormatTimeDifference(DateTime? targetDate)
    {
        if (!targetDate.HasValue)
        {
            return "Date not specified";
        }

        TimeSpan timeDiff = DateTime.Now - targetDate.Value;

        if (timeDiff.TotalSeconds < 0)
        {
            timeDiff = timeDiff.Negate();

            if (timeDiff.Days > 1)
            {
                return $"{timeDiff.Days} days";
            }
            else if (timeDiff.Days == 1)
            {
                return "Tomorrow";
            }
            else if (timeDiff.Hours > 0)
            {
                return $"{timeDiff.Hours} hours";
            }
            else if (timeDiff.Minutes > 0)
            {
                return $"{timeDiff.Minutes} min";
            }
            else
            {
                return "In the future";
            }
        }

        if (timeDiff.Days > 1)
        {
            return $"{timeDiff.Days} days   ";
        }
        else if (timeDiff.Days == 1)
        {
            return "Yesterday";
        }
        else if (timeDiff.Hours > 0)
        {
            return $"{timeDiff.Hours} hours";
        }
        else if (timeDiff.Minutes > 0)
        {
            return $"{timeDiff.Minutes} min";
        }
        else
        {
            return "Just now";
        }
    }
}