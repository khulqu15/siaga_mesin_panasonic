@model panasonic_machine_checker.Models.CasesModel;
@{
    var repairScheduleList = ViewBag.RepairScheduleList as List<RepairSchedules>;
    var machineList = ViewBag.MachineList as List<Machines>;
    var userList = ViewBag.UserList as List<Users>;
    var memberList = ViewBag.MemberList as List<Users>;
    var statusList = ViewBag.StatusList as List<StatusCases>;
    var buData = ViewBag.BU;
    Layout = "~/Views/Shared/_App_Layout.cshtml";
}

<div class="w-full bg-base-100 p-6 rounded-xl mt-5">

    <input type="checkbox" id="call_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box max-w-xl">
            <h3 class="font-bold text-lg">Call Vendor Form</h3>
            <form id="formCallData">
                <div class="form-control my-3 hidden">
                    <label for="call_case_id">Case Id</label>
                    <input type="text" id="call_case_id" readonly name="call_case_id" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="call_case_name">Selected Case</label>
                    <input type="text" id="call_case_name" readonly name="call_case_name" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3 hidden">
                    <label for="call_reported_by_id">Scheduled By</label>
                    <input type="text" id="call_reported_by_id" readonly name="call_reported_by_id" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="call_reported_by">Scheduled By</label>
                    <input type="text" id="call_reported_by" readonly name="call_reported_by" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="call_call_date">Call with vendor (date)</label>
                    <input type="date" id="call_call_date" name="call_call_date" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="reported_at">Description</label>
                    <textarea type="date" class="textarea textarea-bordered w-full" id="description" name="description"></textarea>
                </div>
                <div class="modal-action">
                    <label for="call_modal" class="btn">Cancel</label>
                    <button type="submit" class="btn btn-primary text-white">Save schedule</button>
                </div>
            </form>
        </div>
    </div>

    <input type="checkbox" id="kyt_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box max-w-xl">
            <h3 class="font-bold text-lg">Take Case (KYT Form)</h3>
            <form id="formKYTData">
                <div class="form-control my-3 hidden">
                    <label for="kyt_case_id">Case Id</label>
                    <input type="text" id="kyt_case_id" name="call_case_id" required class="input input-bordered w-full" />
                </div>
                <div class="grid grid-cols-2 gap-3">
                    <div class="form-control my-3">
                        <label for="kyt_case_name">Selected Case</label>
                        <input readonly type="text" readonly id="kyt_case_name" name="kyt_case_name" required class="input input-bordered w-full" />
                    </div>
                    <div class="form-control my-3">
                        <label for="kyt_machine_name">Machine Selected</label>
                        <input readonly type="text" id="kyt_machine_name" name="kyt_machine_name" required class="input input-bordered w-full" />
                    </div>
                </div>
                <div class="grid grid-cols-2 gap-3">
                    <div class="form-control my-3">
                        <label for="kyt_bu_name">BU Selected</label>
                        <input readonly type="text" id="kyt_bu_name" name="kyt_bu_name" required class="input input-bordered w-full" />
                    </div>
                    <div class="form-control my-3">
                        <label for="kyt_lini_name">Lini Selected</label>
                        <input readonly type="text" id="kyt_lini_name" name="kyt_lini_name" required class="input input-bordered w-full" />
                    </div>
                </div>
                <div class="form-control my-3 hidden">
                    <label for="kyt_filled_by_id">Filled By</label>
                    <input readonly type="text" id="kyt_filled_by_id" name="kyt_filled_by_id" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="kyt_filled_by_name">Filled By</label>
                    <input readonly type="text" id="kyt_filled_by" name="kyt_filled_by" required class="input input-bordered w-full" />
                </div>
                <div class="flex items-end gap-3 my-3">
                    <div class="form-control grow">
                        <label for="member">KYT Member</label>
                        <select id="select_member_kyt" class="select select-bordered w-full">
                            <option disabled selected value="">Select Member MTC</option>
                            @foreach(var item in memberList)
                            {
                                var Email = item.Email as string;
                                var budata = buData as string;
                                @if(Email.Contains(buData.ToLower()))
                                {
                                    <option value="@item.Id-@item.Name-@item.Email">@item.Name - @item.Email</option>
                                }
                            } 
                        </select>
                    </div>
                    <button type="button" id="btnAddMember" class="btn bg-primary/20 text-primary">Add</button>
                </div>
                <div id="added_members" class="p-4 bg-primary/10 rounded-xl hidden">
                    <h5 class="text-primary font-semibold">Member added</h5>
                </div>
                <div class="form-control my-3">
                    <label for="potential_hazard">Crash Analisys</label>
                    <textarea id="potential_hazard" name="potential_hazard" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="form-control my-3">
                    <label for="kyt_description">Description</label>
                    <textarea id="kyt_description" name="kyt_description" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="form-control my-3">
                    <label for="kyt_action">Action Needed</label>
                    <textarea id="kyt_action" name="kyt_action" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="divider">Dangerous Mode</div>
                <div class="grid grid-cols-3 gap-2">
                    <label class="flex items-center gap-3 cursor-pointer">
                        <input type="checkbox" id="crash_danger" class="checkbox checkbox-primary" />
                        <span class="label-text">Tertabrak / Terjatuh</span>
                    </label>
                    <label class="flex items-center gap-3 cursor-pointer">
                        <input type="checkbox" id="voltage_danger" class="checkbox checkbox-primary" />
                        <span class="label-text">Sengatan Listrik</span>
                    </label>
                    <label class="flex items-center gap-3 cursor-pointer">
                        <input type="checkbox" id="bounce_danger" class="checkbox checkbox-primary" />
                        <span class="label-text">Terpental</span>
                    </label>
                    <label class="flex items-center gap-3 cursor-pointer">
                        <input type="checkbox" id="weight_danger" class="checkbox checkbox-primary" />
                        <span class="label-text">Benda Berat</span>
                    </label>
                    <label class="flex items-center gap-3 cursor-pointer">
                        <input type="checkbox" id="weight_danger" class="checkbox checkbox-primary" />
                        <span class="label-text">Suhu tinggi</span>
                    </label>
                    <label class="flex items-center gap-3 cursor-pointer">
                        <input type="checkbox" id="chemistry_danger" class="checkbox checkbox-primary" />
                        <span class="label-text">Kandungan Kimia</span>
                    </label>
                    <label class="flex items-center gap-3 cursor-pointer">
                        <input type="checkbox" id="stuck_danger" class="checkbox checkbox-primary" />
                        <span class="label-text">Terjepit / Terlilit</span>
                    </label>
                </div>
                <div class="divider">Prepare</div>
                <div class="form-control my-3">
                    <label for="prepare_process">Process</label>
                    <textarea id="prepare_process" name="prepare_process" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="form-control my-3">
                    <label for="prepare_prediction">Danger Prediction</label>
                    <textarea id="prepare_prediction" name="prepare_prediction" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="form-control my-3">
                    <label for="prepare_action">Tindakan Pengendalian</label>
                    <textarea id="prepare_action" name="prepare_action" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="divider">Main</div>
                <div class="form-control my-3">
                    <label for="main_process">Process</label>
                    <textarea id="main_process" name="main_process" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="form-control my-3">
                    <label for="main_prediction">Danger Prediction</label>
                    <textarea id="main_prediction" name="main_prediction" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="form-control my-3">
                    <label for="main_action">Tindakan Pengendalian</label>
                    <textarea id="main_action" name="main_action" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="divider">Confirm</div>
                <div class="form-control my-3">
                    <label for="confirm_process">Process</label>
                    <textarea id="confirm_process" name="confirm_process" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="form-control my-3">
                    <label for="confirm_prediction">Danger Prediction</label>
                    <textarea id="confirm_prediction" name="confirm_prediction" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="form-control my-3">
                    <label for="confirm_action">Tindakan Pengendalian</label>
                    <textarea id="confirm_action" name="confirm_action" required class="textarea textarea-bordered w-full"></textarea>
                </div>
                <div class="modal-action">
                    <label for="kyt_modal" class="btn">Cancel</label>
                    <button type="submit" class="btn btn-primary text-white">Take Case</button>
                </div>
            </form>
        </div>
    </div>


    <input type="checkbox" id="machine_repair_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box max-w-xl">
            <h3 class="font-bold text-lg">Machine Repairs Form</h3>
            <form id="machineRepairData">
                <div class="form-control my-3 hidden">
                    <label for="schedule_id">Schedule Id</label>
                    <input type="text" id="schedule_id" readonly name="schedule_id" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="schedule_name">Schedule</label>
                    <input type="text" id="schedule_name" readonly name="schedule_name" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3 hidden">
                    <label for="reviewed_by">Reviewed Id</label>
                    <input type="text" id="reviewed_by" readonly name="reviewed_by" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="reviewed_name">Reviewed By</label>
                    <input type="text" id="reviewed_name" readonly name="reviewed_name" required class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="repair_date">Repair date</label>
                    <input type="date" id="repair_date" name="repair_date" class="input input-bordered w-full" />
                </div>
                <div class="form-control my-3">
                    <label for="reported_at">Description</label>
                    <textarea type="date" class="textarea textarea-bordered w-full" id="description" name="description"></textarea>
                </div>
                <div class="modal-action">
                    <label for="machine_repair_modal" class="btn">Cancel</label>
                    <button type="submit" class="btn btn-primary text-white">Submit Data</button>
                </div>
            </form>
        </div>
    </div>

    <input type="checkbox" id="form_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box max-w-xl">
            <h3 class="font-bold text-lg">Case's Form</h3>
            <form id="formData">
                <div class="form-control my-3">
                    <label for="machine_id">Select Machine</label>
                    <select required class="select select-bordered w-full mt-1" id="machine_id" name="machine_id">
                        <option value="" disabled selected>Select Machine</option>
                        @foreach (var machine in machineList)
                        {
                            <option value="@machine.Id">@machine.Name</option>
                        }
                    </select>
                </div>
                <div class="form-control my-3 hidden">
                    <label for="reported_at_id">Reported By (Id)</label>
                    <input readonly type="text" class="input input-bordered w-full" id="reported_by_id" name="reported_by_id" />
                </div>
                <div class="form-control my-3">
                    <label for="reported_at_id">Reported By</label>
                    <input readonly type="text" class="input input-bordered w-full" id="reported_by" name="reported_by" />
                </div>
                <div class="form-control my-3 hidden">
                    <label for="status">Current Status</label>
                    <select required class="select select-bordered w-full mt-1" id="status" name="status">
                        <option value="" disabled selected>Select Status</option>
                        @foreach (var status in statusList)
                        {
                            <option value="@status.Id">@status.Name</option>
                        }
                    </select>
                </div>
                <div class="form-control my-3">
                    <label for="reported_at">Completed At</label>
                    <input type="date" class="input input-bordered w-full" id="completed_at" name="completed_at" />
                </div>
                <div class="form-control my-3">
                    <label for="reported_at">Description</label>
                    <textarea type="date" class="textarea textarea-bordered w-full" id="description" name="description"></textarea>
                </div>
                <div class="modal-action">
                    <label for="form_modal" class="btn">Cancel</label>
                    <button type="submit" class="btn btn-primary text-white">Approve</button>
                </div>
            </form>
        </div>
    </div>

    <input type="checkbox" id="delete_modal" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box">
            <h3 class="font-bold text-lg">Delete Case ?</h3>
            <p class="text-sm">The case data will be deleted permanently</p>
            <div class="modal-action">
                <label for="delete_modal" class="btn">Cancel</label>
                <button id="deleteBtn" class="btn btn-error text-white">Delete</button>
            </div>
        </div>
    </div>

    <div>
        <div class="flex items-center justify-between w-full mb-3">
            <div class="flex items-center justify-between w-full mb-3">
                <h1 class="font-semibold">Cases <span class="badge badge-primary">@Model.TotalItems</span></h1>
                <div>
                    <button class="btn btn-primary btn-sm btnExport" id="btnExport">Export Excel</button>
                    <select class="select w-24 select-sm select-bordered" id="sort-filter">
                        <option disabled selected>Select Order</option>
                        <option value="newest">Terbaru (Newest)</option>
                        <option value="oldest">Terlama (Oldest)</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="w-full grid md:grid-cols-5 grid-cols-3 gap-3 mb-4">
            <div>
                <button id="btnStatusPending" class="btn btn-sm bg-base-200 text-base-content w-full">Pending</button>
            </div>
            <div>
                <button id="btnStatusCalled" class="btn btn-sm bg-base-200 text-base-content w-full">Scheduled</button>
            </div>
            <div>
                <button id="btnStatusVendor" class="btn btn-sm bg-base-200 text-base-content w-full">Called</button>
            </div>
            <div>
                <button id="btnStatusProgress" class="btn btn-sm bg-base-200 text-base-content w-full">Progress</button>
            </div>
            <div>
                <button id="btnStatusComplete" class="btn btn-sm bg-base-200 text-base-content w-full">Complete</button>
            </div>
        </div>
        <div class="overflow-x-auto">
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th></th>
                        <th>Machine</th>
                        <th>Reported By</th>
                        <th>Reported At</th>
                        <th>Deadline</th>
                        @* <th>BU</th>
                        <th>Lini</th>
                        <th>Status</th> *@
                        <th>Member</th>
                        <th>Approval</th>
                        <th>Description</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.CasesList.Count > 0)
                    {
                        int counter = 1;
                        foreach (var item in Model.CasesList)
                        {
                            @* DateTime now = DateTime.Now;
                            @if(now >= item.DateCompleted)
                            { *@
                                <tr class="case_list" id="item-@item.Id">
                                    <th class="case_counter">@counter</th>
                                    <td class="hidden case_machine_id">@item.MachineId</td>
                                    <td class="case_machine">@item.Machine.Name</td>
                                    <td class="hidden case_reported_by_id">@item.ReportedById</td>
                                    <td class="case_reported_by">@item.ReportedByNavigation.Name</td>
                                    <td class="case_date_reported">@item.DateReported</td>
                                    <td class="hidden case_date_completed">@item.DateCompleted</td>
                                    <td>
                                        @if (item.DateCompleted.HasValue)
                                        {
                                            <p class="mb-1">@item.DateCompleted?.ToString("dd/MM/yyyy HH:mm")</p>
                                            <span class="div py-1 rounded px-2 text-xs @GetTimeDiffClass(item.DateCompleted)">@FormatTimeDifference(item.DateCompleted)</span>
                                        }
                                    </td>
                                    @* <td class="case_bu_name">@item.BU.Name</td>
                                    <td class="case_lini_name">@item.Lini.Name</td> *@
                                    @* <td class="hidden case_status_id">@item.StatusId</td> *@
                                    <td class="hidden case_potential_hazard">
                                        @foreach (var potential in item.Kytforms)
                                        {
                                            @potential.PotentialHazard
                                        }
                                    </td>
                                    <td class="case_analysis hidden">
                                        @foreach (var potential in item.Kytforms)
                                        {
                                            @potential.Description
                                        }
                                    </td>
                                    @* <td class="case_status">@item.Status.Name</td> *@
                                    <td class="case_approved_at hidden">@item.ApprovedAt</td>
                                    <td class="case_kyt_analytics hidden">
                                        @if (item.Kytforms.Any())
                                        {
                                            @item.Kytforms.First().PotentialHazard
                                        }
                                    </td>
                                    <td class="case_kyt_action hidden">
                                        @if (item.Kytforms.Any())
                                        {
                                            @item.Kytforms.First().Action
                                        }
                                    </td>
                                    <td class="case_kyt_members">
                                        @{
                                            var names = item.Kytforms.SelectMany(data => data.Member)
                                            .Select(kyt => kyt.UserMember.Name)
                                            .Distinct()
                                            .ToList();

                                            foreach (var name in names)
                                            {
                                                    <span>@name</span>
                                            }
                                        }
                                    </td>
                                    <td class="case_approval">
                                        @if (item.IsApproved == 1)
                                        {
                                            <span class="badge badge-success text-white">Approved</span>
                                        }
                                        else
                                        {
                                            <span class="badge badge-error text-white">Waiting</span>
                                        }
                                    </td>
                                    <td class="case_description">@item.Description</td>
                                    <td class="flex align-items-center gap-1">
                                        @if(item.IsApproved != 1 && item.Status.Name == "Called") {
                                            <label for="call_modal" data-itemid="@item.Id" data-casename="@item.Machine.Name" data-reportedby="@item.ReportedByNavigation.Name" class="btn btnCall bg-primary/10 text-primary btn-sm">
                                                Call Vendor
                                            </label>
                                        }
                                        @if (item.IsApproved != 1 && item.Status.Name != "Progress" && item.Status.Name != "Vendor" && item.Status.Name != "Success" && item.Status.Name != "Pending")
                                        {
                                            <label for="form_modal" data-itemid="@item.Id" data-casename="@item.Machine.Name" data-reportedby="@item.ReportedByNavigation.Name" class="btn btnEdit btn-primary btn-sm">
                                                Approve
                                            </label>
                                        }
                                        @if (item.Status.Name != "Success" && item.IsApproved == 1) {
                                            <button class="btn btnFinish btn-info btn-sm" data-machineid="@item.MachineId" data-itemid="@item.Id">Set Finish</button>
                                        }
                                        @if (item.Status.Name == "Vendor")
                                        {
                                            <button class="btn btnFinish btn-info btn-sm" data-machineid="@item.MachineId" data-itemid="@item.Id">Set Finish</button>

                                        }
                                        @if (item.Status.Name != "Success")
                                        {
                                            @* <label for="delete_modal" data-itemid="@item.Id" class="btn btnDelete btn-error btn-sm">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z" /></svg>
                                            </label> *@
                                        }
                                        else
                                        {
                                           @*  <button class="btn btnProgress btn-info btn-sm" data-itemid="@item.Id">Set Progress</button> *@
                                        }
                                    </td>
                                </tr>
                            @* } *@
                            counter++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="11">
                                <div class="w-full bg-error text-white p-3 rounded-xl text-center">
                                    Cases Not Found
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th></th>
                        <th>Machine</th>
                        <th>Reported By</th>
                        <th>Reported At</th>
                        <th>Deadline</th>
                        @* <th>BU</th>
                        <th>Lini</th>
                        <th>Status</th> *@
                        <th>Member</th>
                        <th>Approval</th>
                        <th>Description</th>
                        <th>Action</th>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div class="w-full flex mt-10 justify-end">
            <div class="join">
                <button class="btn join-item" onclick="location.href='@Url.Action("Leader", new { page = Model.CurrentPage - 1 })'" @(Model.CurrentPage == 1 ? "disabled" : "")><</button>
                @for (int i = 1; i <= Math.Ceiling((double)Model.TotalItems / Model.PageSize); i++)
                {
                    <button class="btn join-item @(Model.CurrentPage == i ? "btn-primary" : "")" onclick="location.href='@Url.Action("Leader", new { page = i })'">@i</button>
                }
                <button class="btn join-item" onclick="location.href='@Url.Action("Leader", new { page = Model.CurrentPage + 1 })'" @(Model.CurrentPage * Model.PageSize >= Model.TotalItems ? "disabled" : "")>></button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.1/xlsx.full.min.js"></script>

    <script>
        const urlParams = new URLSearchParams(window.location.search);
        let selectedMachine = 0
        const statusOrderUrl = urlParams.get('statusOrder');
        if (statusOrderUrl == null || statusOrderUrl == undefined || statusOrderUrl == 'Pending') {
            document.getElementById('btnStatusPending').classList.add('bg-primary', 'text-white')
        }
        if (statusOrderUrl == 'Called') {
            document.getElementById('btnStatusCalled').classList.add('bg-primary', 'text-white')
        }
        if (statusOrderUrl == 'Vendor') {
            document.getElementById('btnStatusVendor').classList.add('bg-primary', 'text-white')
        }
        if (statusOrderUrl == 'Progress') {
            document.getElementById('btnStatusProgress').classList.add('bg-primary', 'text-white')
        }
        if (statusOrderUrl == 'Success') {
            document.getElementById('btnStatusComplete').classList.add('bg-primary', 'text-white')
        }

        document.getElementById('btnStatusPending').addEventListener('click', (event) => {
            event.preventDefault()
            changeStatus('Pending')
        })
        document.getElementById('btnStatusProgress').addEventListener('click', (event) => {
            event.preventDefault()
            changeStatus('Progress')
        })
        document.getElementById('btnStatusVendor').addEventListener('click', (event) => {
            event.preventDefault()
            changeStatus('Vendor')
        })
        document.getElementById('btnStatusCalled').addEventListener('click', (event) => {
            event.preventDefault()
            changeStatus('Called')
        })
        document.getElementById('btnStatusComplete').addEventListener('click', (event) => {
            event.preventDefault()
            changeStatus('Success')
        })

        function changeStatus(status) {
            let sort_data = document.getElementById('sort-filter').value == 'Select Order' ? 'newest' : document.getElementById('sort-filter').value
            console.log(sort_data)
            let current_url = window.location.href
            let baseUrl = current_url.split('?')[0]
            window.location.href = baseUrl + '?page=1&sortOrder=' + sort_data + '&statusOrder=' + status
        }

        let user_id = 0
        let user_name = ''
        let case_id = 0
        let case_name = ''
        let members_added = []
        let dangerous_mode = ''

        function updateDangerList() {
            const checkboxes = document.querySelectorAll('.checkbox');
            dangerous_modes = Array.from(checkboxes)
                .filter(checkbox => checkbox.checked)
                .map(checkbox => checkbox.nextSibling.nextSibling.textContent)
                .join(', ');

            console.log(dangerous_modes);
        }

        document.querySelectorAll('.checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateDangerList);
        });

        function exportExcel() {
            filename = 'exported_case.xlsx'
            excel_data = []
            console.log(Array.from(document.getElementsByClassName('case_list')))
            Array.from(document.getElementsByClassName('case_list')).map((element, index) => {
                let xlsx_machine_name = Array.from(element.getElementsByClassName('case_machine'))[0].innerHTML
                let xlsx_approved_at = Array.from(element.getElementsByClassName('case_approved_at'))[0].innerHTML
                let xlsx_reported_at = Array.from(element.getElementsByClassName('case_date_reported'))[0].innerHTML
                let xlsx_reported_by = Array.from(element.getElementsByClassName('case_reported_by'))[0].innerHTML
                let xlsx_completed_at = Array.from(element.getElementsByClassName('case_date_completed'))[0].innerHTML
                let xlsx_site_name = Array.from(element.getElementsByClassName('case_lini_name'))[0].innerHTML
                let xlsx_section = Array.from(element.getElementsByClassName('case_bu_name'))[0].innerHTML
                let xlsx_trouble = Array.from(element.getElementsByClassName('case_description'))[0].innerHTML
                let xlsx_analytics = Array.from(element.getElementsByClassName('case_kyt_analytics'))[0].innerHTML
                let xlsx_action = Array.from(element.getElementsByClassName('case_kyt_action'))[0].innerHTML
                var nameSpans = element.querySelectorAll('.case_kyt_members span');
                var names = [];

                nameSpans.forEach(function (span) {
                    names.push(span.textContent.trim());
                });

                var namesString = names.join(', ');

                let total_minutes = 0
                let total_hours = 0
                if (xlsx_reported_at != null) {
                    let end_date = new Date()
                    if (xlsx_completed_at != null) end_date = new Date(xlsx_completed_at)

                    let num = Math.round(0xffffff * Math.random())

                    let reported = new Date(xlsx_reported_at)
                    let difference = Math.abs(end_date.getTime() - reported.getTime())
                    total_minutes = Math.round(difference / 60000)
                    total_hours = Math.round(difference / 3600000)
                }
                let xlsx_duration = total_minutes
                let xlsx_duration_hour = total_hours

                excel_data.push({
                    '#': index + 1,
                    'Issued': xlsx_approved_at == '' || xlsx_approved_at == null ? '-' : xlsx_approved_at,
                    'Finished': xlsx_completed_at,
                    'Section': xlsx_site_name,
                    'Site Name': xlsx_machine_name,
                    'Trouble': xlsx_trouble,
                    'Analisis': xlsx_analytics,
                    'Action': xlsx_action,
                    'Duration': xlsx_duration_hour + ' Hour, ' + xlsx_duration + ' Minutes',
                    'Closed': namesString
                })
            })
            console.log(excel_data)
            var ws = XLSX.utils.json_to_sheet(excel_data);
            var wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "People");
            XLSX.writeFile(wb, filename);
        }

        document.getElementById('btnExport').addEventListener('click', (event) => {
            event.preventDefault()
            exportExcel()
        })

        let checkToken = sessionStorage.getItem('authToken')
        if (checkToken != null && checkToken != undefined) {
            let separator = checkToken.split('-')
            let role = separator.pop()
            let suffix = checkToken.split('-')[1]
            let user_id_selection = checkToken.slice(5, checkToken.indexOf('-'))
            user_id = parseInt(checkToken.split("-")[1])

            fetchUser(user_id, role)
        } else window.location.href = "/Login"

        function fetchUser(user_id, role) {
            fetch("/Admin/UserData/" + user_id, {
                method: "GET",
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then((response) => {
                    return response.json()
                })
                .then((data) => {
                    console.log(data.data)
                    document.getElementById('call_reported_by').value = data.data.name
                    document.getElementById('call_reported_by_id').value = data.data.id
                    document.getElementById('reviewed_by').value = data.data.id
                    document.getElementById('reviewed_name').value = data.data.name
                    document.getElementById('kyt_filled_by').value = data.data.name
                    document.getElementById('kyt_filled_by_id').value = data.data.id
                    document.getElementById('reported_by').value = data.data.name
                    document.getElementById('reported_by_id').value = data.data.id
                })
        }


        function updateMachineRepair() {
            let schedule_id = parseInt(document.getElementById('schedule_id').value);
            let reviewed_by = parseInt(document.getElementById('reviewed_by').value);
            let repair_date = document.getElementById('repair_date').value;
            let case_data = {
                ScheduleId: schedule_id,
                ReviewedBy: reviewed_by,
                StatusId: 1,
                RepairDate: repair_date,
                Corrections: ' ',
                Result: ' ',
            }
            let url ='/MTC/Leader/CreateMachineRepairs';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(case_data)
            })
                .then((response) => response.json())
                .then((data) => {
                    alert('Machine Repair Data Saved');
                    document.getElementById('machine_repair_modal').click()
                    setTimeout(() => {
                        window.location.reload()
                    }, 300)
                })
        }

        async function updateCallVendor() {
            let case_id = parseInt(document.getElementById('call_case_id').value);
            let scheduled_by = parseInt(document.getElementById('call_reported_by_id').value);
            let call_date = new Date(document.getElementById('call_call_date').value)
            let case_data = {
                StatusId: 1,
                CaseId: case_id,
                ScheduledBy: scheduled_by,
                CallDate: call_date,
                RepairDate: call_date,
            }
            let url = '/Mtc/Leader/CreateRepairSchedule';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(case_data)
            })
                .then((response) => response.json())
                .then((data) => {
                    alert('Repair Schedule Data Saved');
                    document.getElementById('call_modal').click()
                })
        }

        let data = null
        function updateMachine() {
            let machine_id = parseInt(document.getElementById('machine_id').value);
            let reported_by = parseInt(document.getElementById('reported_by_id').value);
            let status_id = 3
            let date = new Date();
            date.setHours(date.getHours() + 1)
            date.setMinutes(date.getMinutes() + 30)
            date.setSeconds(date.getSeconds() + 45)
            let date_reported = date.toISOString();
            let date_completed = document.getElementById('completed_at').value;
            let description = document.getElementById('description').value;
            let case_data = {
                Description: description,
                MachineId: machine_id,
                ReportedById: reported_by,
                StatusId: status_id,
                DateReported: date_reported,
                DateCompleted: date_completed,
                IsApproved: 1,
                DecisionManager: null,
            }
            if (data != null) case_data.Id = data
            let url = data != null ? '/MTC/Leader/UpdateCase/' + data : '/MTC/Leader/CreateCase';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(case_data)
            })
                .then((response) => response.json())
                .then((data) => {
                    alert('Case Approved')
                    document.getElementById('form_modal').click()
                    document.getElementById('kyt_modal').click()
                })
        }

        function generateJobOrder(case_data) {
            console.log(case_data)
            let scheduled_date = new Date(case_data.dateCompleted)
            fetch('/Production/CreateJobOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    CaseId: case_data.id,
                    ScheduledBy: user_id,
                    ScheduledDate: scheduled_date.toISOString().split('T')[0],
                    StatusId: case_data.statusId,
                })
            })
                .then((response) => response.json())
                .then((data) => {
                    alert('Case Saved');
                    document.getElementById('form_modal').click()
                    setTimeout(() => {
                        window.location.reload()
                    }, 300)
                })
        }

        function updateKYT() {
            let case_id = parseInt(document.getElementById('kyt_case_id').value);
            let filled_by = parseInt(document.getElementById('kyt_filled_by_id').value);
            let action = document.getElementById('kyt_action').value;
            let potential_hazard = document.getElementById('potential_hazard').value;
            let prepare_process = document.getElementById('prepare_process').value;
            let prepare_prediction = document.getElementById('prepare_prediction').value;
            let prepare_action = document.getElementById('prepare_action').value;
            let main_process = document.getElementById('main_process').value;
            let description = document.getElementById('kyt_description').value;
            let main_prediction = document.getElementById('main_prediction').value;
            let main_action = document.getElementById('main_action').value;
            let confirm_process = document.getElementById('confirm_process').value;
            let confirm_prediction = document.getElementById('confirm_prediction').value;
            let confirm_action = document.getElementById('confirm_action').value;

            let members = []
            members_added.map((item, index) => {
                members.push(item.split('-')[0])
            })

            let case_data = {
                CaseId: case_id,
                FilledBy: filled_by,
                Action: action,
                PotentialHazard: potential_hazard,
                PrepareProcess: prepare_process,
                PreparePrediction: prepare_prediction,
                PrepareAction: prepare_action,
                MainProcess: main_process,
                MainPrediction: main_prediction,
                MainAction: main_action,
                ConfirmProcess: confirm_process,
                Description: description,
                ConfirmPrediction: confirm_prediction,
                ConfirmAction: confirm_action,
                DangerousMode: dangerous_mode,
                Approval: 1,
                // Member: members
            };

            let url = '/MTC/Leader/CreateKYTForms';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(case_data)
            })
                .then((response) => response.json())
                .then((data) => {
                    let kyt_id = data.machine.id;
                    console.log(data);
                    console.log(data.machine);
                    let now = new Date().toISOString();

                    let memberPromises = members_added.map((member) => {
                        let member_id = member.split('-')[0];
                        let member_item_data = {
                            KytId: parseInt(kyt_id),
                            MemberId: parseInt(member_id),
                            CreatedAt: now,
                            UpdatedAt: now,
                        };
                        return fetch('/MTC/Leader/CreateKYTMember', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(member_item_data)
                        }).then(res => res.json()); 
                    });

                    Promise.all(memberPromises)
                        .then((results) => {
                            console.log("All member data saved successfully", results);
                            alert('KYT Forms and Members Data Saved');
                            setTimeout(() => {
                                window.location.reload();
                            }, 300);
                        })
                        .catch((error) => {
                            console.error('Error saving member data:', error);
                            alert('Failed to save all member data');
                        });
                })
                .catch((error) => {
                    console.error('Error:', error);
                    alert('Failed to save KYT form data');
                });
        }

        document.getElementById('sort-filter').addEventListener('change', (event) => {
            window.location.href = '?page=1&sortOrder=' + event.target.value;
        })

        Array.from(document.getElementsByClassName('btnEdit')).map((element, index) => {
            element.addEventListener('click', async (event) => {
                data = await event.target.getAttribute('data-itemid')
                case_id = await event.target.getAttribute('data-itemid')
                case_name = await event.target.getAttribute('data-reportedby') + ' - ' + event.target.getAttribute('data-casename')
                document.getElementById('kyt_case_id').value = case_id
                document.getElementById('kyt_case_name').value = case_name
                let itemData = document.getElementById('item-' + data)
                const completedAt = new Date(itemData.querySelector('.case_date_completed').innerHTML);
                document.getElementById('kyt_machine_name').value = Array.from(itemData.getElementsByClassName('case_machine'))[0].innerHTML
                document.getElementById('kyt_bu_name').value = Array.from(itemData.getElementsByClassName('case_bu_name'))[0].innerHTML
                document.getElementById('kyt_lini_name').value = Array.from(itemData.getElementsByClassName('case_lini_name'))[0].innerHTML
                document.getElementById('machine_id').value = Array.from(itemData.getElementsByClassName('case_machine_id'))[0].innerHTML
                document.getElementById('status').value = Array.from(itemData.getElementsByClassName('case_status_id'))[0].innerHTML
                document.getElementById('completed_at').value = completedAt.toISOString().split('T')[0];
                document.getElementById('description').value = Array.from(itemData.getElementsByClassName('case_description'))[0].innerHTML
            })
        })
        Array.from(document.getElementsByClassName('btnDelete')).map((element, index) => {
            element.addEventListener('click', (event) => {
                data = event.target.getAttribute('data-itemid')
            })
        })

        function setUsedMachines(machine_id, used_status) {
            fetch('/MTC/UpdateMachines/' + machine_id, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    IsUsed: used_status
                })
            }).then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Machine use');
                    } else {
                        alert('Machine cant use');
                    }
                });
        }

        function setFinishDate(caseId) {
            let date_now = new Date().toISOString()
            fetch("/MTC/Leader/UpdateCase/" + caseId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    dateCompleted: date_now,
                })
            })
                .then((response) => response.json())
                .then((data) => {
                    fetch()
                    setTimeout(() => {
                        window.location.reload()
                    }, 100)
                })
        }

        function setStatus(caseId, statusId) {
            fetch("/MTC/Leader/UpdateCase/" + caseId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    StatusId: statusId,
                })
            })
                .then((response) => response.json())
                .then((data) => {
                    fetch()
                    setTimeout(() => {
                        window.location.reload()
                    }, 100)
                })
        }

        Array.from(document.getElementsByClassName('btnFinish')).map((element, index) => {
            element.addEventListener('click', (event) => {
                selectedMachine = event.target.getAttribute('data-machineid')
                data = event.target.getAttribute('data-itemid')
                setStatus(data, 2)
                setFinishDate(data)
                setUsedMachines(selectedMachine, 0)
            })
        })

        document.getElementById('btnAddMember').addEventListener('click', (event) => {
            event.preventDefault()
            let member_select = document.getElementById('select_member_kyt').value
            let existing_data = members_added.find((item) => item == member_select)
            if(member_select != "" && existing_data == null) {
                members_added.push(member_select)
                if (members_added.length > 0) document.getElementById('added_members').classList.remove('hidden')
                let id = member_select.split('-')[0]
                let name = member_select.split('-')[1]
                let email = member_select.split('-')[2]

                let div = document.createElement('div');
                div.id = 'member-' + id;
                div.className = 'flex items-center justify-between';
                div.innerHTML = '<span>' + name + ' - ' + email + '</span>' +
                    '<button id="btnDeleteMember-'+ id +'" type="button" data-id="'+ id +'" class="btnDeleteMember btn-sm bg-primary/20 btn">Hapus</button>';

                document.getElementById('added_members').appendChild(div);
                Array.from(document.getElementsByClassName('btnDeleteMember')).map((element, index) => {
                    element.addEventListener('click', (event) => {
                        let data_id = event.target.getAttribute('data-id')
                        let data_idx = members_added.findIndex((item) => item.split('-')[0] == data_id)
                        if (data_idx >= 0) {
                            if (members_added.length <= 1) document.getElementById('added_members').classList.add('hidden')
                            console.log(data_idx)
                            members_added.splice(data_idx, 1)
                            document.getElementById('member-' + data_id).remove()
                        }
                    })
                })
            }
        })

        Array.from(document.getElementsByClassName('btnProgress')).map((element, index) => {
            element.addEventListener('click', (event) => {
                data = event.target.getAttribute('data-itemid')
                setStatus(data, 3)
            })
        })

        Array.from(document.getElementsByClassName('btnCall')).map((element, index) => {
            element.addEventListener('click', async (event) => {
                data = await event.target.getAttribute('data-itemid')
                let casename = await event.target.getAttribute('data-casename')
                let reportedby = await event.target.getAttribute('data-reportedby')
                document.getElementById('call_case_id').value = data
                document.getElementById('call_case_name').value = casename + ' by ' + reportedby
            })
        })
        Array.from(document.getElementsByClassName('btnSchedules')).map(async (element, index) => {
            await Array.from(document.getElementsByClassName('case-data')).map((el, idx) => {
                el.classList.add('hidden')
            })
            element.addEventListener('click', async (event) => {
                data = await event.target.getAttribute('data-itemid')
                let casename = await event.target.getAttribute('data-casename')
                let reportedby = await event.target.getAttribute('data-reportedby')
                document.getElementById('schedule_id').value = data
                document.getElementById('schedule_name').value = casename + ' by ' + reportedby
                Array.from(document.getElementsByClassName('case-'+data)).map((el, idx) => {
                    el.classList.remove('hidden')
                })
            })
        })

        function deleteMachine() {
            fetch('/Admin/DeleteCase/' + data, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: data })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Case deleted');
                        document.getElementById('delete_modal').click()
                    } else {
                        alert('Error deleting case');
                    }
                });
        }

        document.getElementById('formData').addEventListener('submit', (event) => {
            event.preventDefault()
            updateMachine()
        });
        document.getElementById('formCallData').addEventListener('submit', (event) => {
            event.preventDefault()
            updateCallVendor()
            setStatus(data, 5)
        });
        document.getElementById('machineRepairData').addEventListener('submit', (event) => {
            event.preventDefault()
            updateMachineRepair()
        })
        document.getElementById('formKYTData').addEventListener('submit', (event) => {
            event.preventDefault()
            updateKYT()
        })

        document.getElementById('deleteBtn').addEventListener('click', function () {
            deleteMachine();
        });

    </script>
}

@functions {
    public static string GetTimeDiffClass(DateTime? targetDate)
    {
        if (!targetDate.HasValue)
        {
            return "badge-error text-white";
        }

        TimeSpan timeDiff = DateTime.Now - targetDate.Value;
        if (timeDiff.TotalDays < 0)
        {
            if (timeDiff.Days == -1)
            {
                return "badge-warning";
            }
            else
            {
                return "badge-success text-white";
            }
        }
        else
        {
            if (timeDiff.Days == 0)
            {
                return "badge-warning";
            }
            else
            {
                return "badge-error text-white";
            }
        }
    }
    public static string FormatTimeDifference(DateTime? targetDate)
    {
        if (!targetDate.HasValue)
        {
            return "Date not specified";
        }

        TimeSpan timeDiff = DateTime.Now - targetDate.Value;

        if (timeDiff.TotalSeconds < 0)
        {
            timeDiff = timeDiff.Negate();

            if (timeDiff.Days > 1)
            {
                return $"{timeDiff.Days} days";
            }
            else if (timeDiff.Days == 1)
            {
                return "Tomorrow";
            }
            else if (timeDiff.Hours > 0)
            {
                return $"{timeDiff.Hours} hours";
            }
            else if (timeDiff.Minutes > 0)
            {
                return $"{timeDiff.Minutes} min";
            }
            else
            {
                return "In the future";
            }
        }

        if (timeDiff.Days > 1)
        {
            return $"{timeDiff.Days} days   ";
        }
        else if (timeDiff.Days == 1)
        {
            return "Yesterday";
        }
        else if (timeDiff.Hours > 0)
        {
            return $"{timeDiff.Hours} hours";
        }
        else if (timeDiff.Minutes > 0)
        {
            return $"{timeDiff.Minutes} min";
        }
        else
        {
            return "Just now";
        }
    }
}